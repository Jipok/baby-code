import requests
import json

base_url = "https://raw.githubusercontent.com/holtzy/The-Python-Graph-Gallery/master/src/notebooks/"

files = [
    "1-basic-barplot.ipynb",
    "10-barplot-with-number-of-observation.ipynb",
    "100-calling-a-color-with-seaborn.ipynb",
    "101-make-a-color-palette-with-seaborn.ipynb",
    "104-seaborn-themes.ipynb",
    "106-seaborn-style-on-matplotlib-plot.ipynb",
    "11-grouped-barplot.ipynb",
    "110-basic-correlation-matrix-with-seaborn.ipynb",
    "111-custom-correlogram.ipynb",
    "12-stacked-barplot-with-matplotlib.ipynb",
    "120-line-chart-with-matplotlib.ipynb",
    "121-line-chart-customization.ipynb",
    "122-multiple-lines-chart.ipynb",
    "123-highlight-a-line-in-line-plot.ipynb",
    "124-spaghetti-plot.ipynb",
    "125-small-multiples-for-line-chart.ipynb",
    "13-percent-stacked-barplot.ipynb",
    "130-basic-matplotlib-scatterplot.ipynb",
    "131-custom-a-matplotlib-scatterplot.ipynb",
    "132-basic-connected-scatterplot.ipynb",
    "134-how-to-avoid-overplotting-with-python.ipynb",
    "140-basic-pieplot-with-panda.ipynb",
    "150-parallel-plot-with-pandas.ipynb",
    "160-basic-donut-plot.ipynb",
    "161-custom-matplotlib-donut-plot.ipynb",
    "162-change-background-of-donut-plot.ipynb",
    "163-donut-plot-with-subgroups.ipynb",
    "170-basic-venn-diagram-with-2-groups.ipynb",
    "171-basic-venn-diagram-with-3-groups.ipynb",
    "172-custom-venn-diagram.ipynb",
    "173-elaborated-venn-diagram.ipynb",
    "174-change-background-colour-of-venn-diagram.ipynb",
    "180-basic-lollipop-plot.ipynb",
    "181-custom-lollipop-plot.ipynb",
    "182-vertical-lollipop-plot.ipynb",
    "183-highlight-a-group-in-lollipop.ipynb",
    "184-lollipop-plot-with-2-groups.ipynb",
    "185-lollipop-plot-with-conditional-color.ipynb",
    "190-custom-matplotlib-title.ipynb",
    "191-custom-axis-on-matplotlib-chart.ipynb",
    "192-about-matplotlib-margins.ipynb",
    "193-annotate-matplotlib-chart.ipynb",
    "194-split-the-graphic-window-with-subplot.ipynb",
    "196-select-one-color-with-matplotlib.ipynb",
    "197-available-color-palettes-with-matplotlib.ipynb",
    "199-matplotlib-style-sheets.ipynb",
    "2-horizontal-barplot.ipynb",
    "20-basic-histogram-seaborn.ipynb",
    "200-basic-treemap-with-python.ipynb",
    "201-control-the-color-of-treemap.ipynb",
    "202-treemap-with-colors-mapped-on-values.ipynb",
    "21-control-rug-and-density-on-seaborn-histogram.ipynb",
    "220-sankey-diagram-with-matplotlib.ipynb",
    "23-90degree-rotated-histogram.ipynb",
    "231-chord-diagram-with-bokeh.ipynb",
    "24-histogram-with-a-boxplot-on-top-seaborn.ipynb",
    "240-basic-area-chart.ipynb",
    "241-improve-area-chart.ipynb",
    "242-area-chart-and-faceting.ipynb",
    "243-area-chart-with-white-grid.ipynb",
    "25-histogram-with-several-variables-seaborn.ipynb",
    "250-basic-stacked-area-chart.ipynb",
    "251-stacked-area-chart-with-seaborn-style.ipynb",
    "252-baseline-options-for-stacked-area-chart.ipynb",
    "253-control-the-color-in-stacked-area-chart.ipynb",
    "254-pandas-stacked-area-chart.ipynb",
    "255-percentage-stacked-area-chart.ipynb",
    "260-basic-wordcloud.ipynb",
    "261-custom-python-wordcloud.ipynb",
    "262-worcloud-with-specific-shape.ipynb",
    "270-basic-bubble-plot.ipynb",
    "271-custom-your-bubble-plot.ipynb",
    "272-map-a-color-to-bubble-plot.ipynb",
    "281-basic-map-with-basemap.ipynb",
    "282-custom-appearance-of-basemap.ipynb",
    "283-set-bounding-box-in-basemap.ipynb",
    "284-different-types-of-map-projection.ipynb",
    "285-use-a-background-layer.ipynb",
    "286-boundaries-provided-in-basemap.ipynb",
    "288-map-background-with-folium.ipynb",
    "292-choropleth-map-with-folium.ipynb",
    "3-control-color-of-barplots.ipynb",
    "30-basic-boxplot-with-seaborn.ipynb",
    "300-draw-a-connection-line.ipynb",
    "31-horizontal-boxplot-with-seaborn.ipynb",
    "310-basic-map-with-markers.ipynb",
    "312-add-markers-on-folium-map.ipynb",
    "313-bubble-map-with-folium.ipynb",
    "315-a-world-map-of-surf-tweets.ipynb",
    "32-custom-boxplot-appearance-seaborn.ipynb",
    "320-basic-network-from-pandas-data-frame.ipynb",
    "321-custom-networkx-graph-appearance.ipynb",
    "322-network-layout-possibilities.ipynb",
    "323-directed-or-undirected-network.ipynb",
    "324-map-a-color-to-network-nodes.ipynb",
    "325-map-colour-to-the-edges-of-a-network.ipynb",
    "326-background-colour-of-network-chart.ipynb",
    "327-network-from-correlation-matrix.ipynb",
    "33-control-colors-of-boxplot-seaborn.ipynb",
    "34-grouped-boxplot.ipynb",
    "340-scatterplot-animation.ipynb",
    "341-python-gapminder-animation.ipynb",
    "342-animation-on-3d-plot.ipynb",
    "35-control-order-of-boxplot.ipynb",
    "36-add-jitter-over-boxplot-seaborn.ipynb",
    "370-3d-scatterplot.ipynb",
    "371-surface-plot.ipynb",
    "372-3d-pca-result.ipynb",
    "38-show-number-of-observation-on-boxplot.ipynb",
    "39-hidden-data-under-boxplot.ipynb",
    "390-basic-radar-chart.ipynb",
    "391-radar-chart-with-several-individuals.ipynb",
    "392-use-faceting-for-radar-chart.ipynb",
    "4-add-title-and-axis-label.ipynb",
    "40-basic-scatterplot-seaborn.ipynb",
    "400-basic-dendrogram.ipynb",
    "401-customised-dendrogram.ipynb",
    "402-color-dendrogram-labels.ipynb",
    "404-dendrogram-with-heat-map.ipynb",
    "405-dendrogram-with-heatmap-and-coloured-leaves.ipynb",
    "406-chord-diagram_mne.ipynb",
    "41-control-marker-features.ipynb",
    "42-custom-linear-regression-fit-seaborn.ipynb",
    "43-use-categorical-variable-to-color-scatterplot-seaborn.ipynb",
    "44-control-axis-limits-of-plot-seaborn.ipynb",
    "45-control-color-of-each-marker-seaborn.ipynb",
    "46-add-text-annotation-on-scatterplot.ipynb",
    "5-control-width-and-space-in-barplots.ipynb",
    "50-basic-violinplot-and-input-formats.ipynb",
    "500-network-chart-with-edge-bundling.ipynb",
    "502-violinplot-and-swarmplot.ipynb",
    "503-waffle-chart-introduction.ipynb",
    "504-histogram-with-colored-tails.ipynb",
    "505-Introduction-to-swarm-plot-in-seaborn.ipynb",
    "506-histogram-with-small-mutliples.ipynb",
    "51-horizontal-violinplot.ipynb",
    "52-custom-seaborn-violinplot.ipynb",
    "53-control-color-of-seaborn-violinplot.ipynb",
    "54-grouped-violinplot.ipynb",
    "55-control-order-of-groups-in-violinplot-seaborn.ipynb",
    "58-show-number-of-observation-on-violinplot.ipynb",
    "6-change-bars-texture.ipynb",
    "7-custom-barplot-layout.ipynb",
    "70-basic-density-plot-with-seaborn.ipynb",
    "71-density-plot-with-shade-seaborn.ipynb",
    "72-horizontal-density-plot.ipynb",
    "73-control-bandwidth-of-seaborn-density-plot.ipynb",
    "74-density-plot-of-several-variables.ipynb",
    "8-add-confidence-interval-on-barplot.ipynb",
    "80-contour-plot-with-seaborn.ipynb",
    "82-marginal-plot-with-seaborn.ipynb",
    "83-basic-2d-histograms-with-matplotlib.ipynb",
    "84-hexbin-plot-with-matplotlib.ipynb",
    "85-density-plot-with-matplotlib.ipynb",
    "86-avoid-overlapping-in-scatterplot-with-2d-density.ipynb",
    "90-heatmaps-with-various-input-format.ipynb",
    "91-customize-seaborn-heatmap.ipynb",
    "92-control-color-in-seaborn-heatmaps.ipynb",
    "94-use-normalization-on-seaborn-heatmap.ipynb",
    "_template.ipynb",
    "area-fill-between-two-lines-in-matplotlib.ipynb",
    "basic-barplot-with-seaborn.ipynb",
    "basic-histogram-in-matplotlib.ipynb",
    "basic-sankey-diagram-with-pysankey.ipynb",
    "basic-time-series-with-matplotlib.ipynb",
    "bubble-plot-with-seaborn.ipynb",
    "chord-diagram-python-chord.ipynb",
    "choropleth-map-geopandas-python.ipynb",
    "choropleth-map-plotly-python.ipynb",
    "circular-barplot-basic.ipynb",
    "circular-barplot-with-groups.ipynb",
    "circular-packing-1-level-hierarchy.ipynb",
    "circular-packing-several-levels-of-hierarchy.ipynb",
    "connected-scatterplot-for-evolution.ipynb",
    "custom-fonts-in-matplotlib.ipynb",
    "custom-legend-with-matplotlib.ipynb",
    "density-chart-matplotlib.ipynb",
    "density-chart-multiple-groups-seaborn.ipynb",
    "density-mirror.ipynb",
    "error-bars-on-barplot.ipynb",
    "grouped-barplot.ipynb",
    "heatmap-for-timeseries-matplotlib.ipynb",
    "hexbin-map-from-geojson-python.ipynb",
    "how-to-remove-axis-in-matplotlib.ipynb",
    "how-to-use-rectangles-in-matplotlib-legends.ipynb",
    "line-chart-dual-y-axis-with-matplotlib.ipynb",
    "manhattan-plot-with-matplotlib.ipynb",
    "map-read-geojson-with-python-geopandas.ipynb",
    "pie-plot-matplotlib-basic.ipynb",
    "ridgeline-graph-plotly.ipynb",
    "ridgeline-graph-seaborn.ipynb",
    "sankey-diagram-with-python-and-plotly.ipynb",
    "scatterplot-and-log-scale-in-matplotlib.ipynb",
    "scatterplot-with-regression-fit-in-matplotlib.ipynb",
    "seaborn-title-customization.ipynb",
    "stacked-and-percent-stacked-barplot.ipynb",
    "streamchart-basic-matplotlib.ipynb",
    "web-circular-barplot-with-matplotlib.ipynb",
    "web-circular-lollipop-plot-with-matplotlib.ipynb",
    "web-ggbetweenstats-with-matplotlib.ipynb",
    "web-heatmap-and-radial-barchart-plastics.ipynb",
    "web-highlighted-lineplot-with-faceting.ipynb",
    "web-horizontal-barplot-with-labels-the-economist.ipynb",
    "web-lemurs-parallel-chart.ipynb",
    "web-line-chart-with-labels-at-line-end.ipynb",
    "web-lineplots-and-area-chart-the-economist.ipynb",
    "web-lollipop-plot-with-python-mario-kart-64-world-records.ipynb",
    "web-lollipop-plot-with-python-the-office.ipynb",
    "web-multiple-lines-and-panels.ipynb",
    "web-radar-chart-with-matplotlib.ipynb",
    "web-scatterplot-astronaut.ipynb",
    "web-scatterplot-text-annotation-and-regression-matplotlib.ipynb",
    "web-stacked-line-chart-with-labels.ipynb",
    "web-streamchart-with-matplotlib.ipynb",
    "web-text-repel-with-matplotlib.ipynb",
    "web-time-series-and-facetting-with-matplotlib.ipynb"
]


def get_raw_content(file_name):
    url = base_url + file_name
    response = requests.get(url)
    if response.status_code == 200:
        return response.text
    else:
        print(f"Failed to fetch {url}")
        return None

def extract_qa_pairs(notebook_content):
    try:
        notebook = json.loads(notebook_content)
        cells = notebook['cells']
        
        qa_pairs = []
        for i in range(len(cells) - 1):
            if cells[i]['cell_type'] == 'markdown' and cells[i+1]['cell_type'] == 'code':
                question = ''.join(cells[i]['source'])
                answer = ''.join(cells[i+1]['source'])
                qa_pairs.append((question, answer))
                
        return qa_pairs
    except Exception as e:
        print(f"Error parsing notebook: {e}")
        return []
    

all_qa_pairs = []

for file in files:
    content = get_raw_content(file)
    if content:
        qa_pairs = extract_qa_pairs(content)
        all_qa_pairs.extend(qa_pairs)
    
# Save to a .txt file
with open('qa_dataset.txt', 'w', encoding='utf-8') as f:
    for question, answer in all_qa_pairs:
        f.write("Question: " + question + "\n")
        f.write("Answer: " + answer + "\n")
        f.write("---\n")